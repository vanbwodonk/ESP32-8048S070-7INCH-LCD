
#include <Arduino.h>
#include <SD.h>
#include <JPEGDEC.h>
#include <Arduino_GFX_Library.h>

#include "jpegFunc.h"

#define GFX_BL 2
#define TFT_BL GFX_BL

#define SCREEN_W 800
#define SCREEN_H 480

#define TOUCH_GT911_SCL 20
#define TOUCH_GT911_SDA 19
#define TOUCH_GT911_INT -1
#define TOUCH_GT911_RST 38

#define TOUCH_MAX_X 480
#define TOUCH_MAX_Y 272

#define JPEG_FILENAME "/octocat.jpg"

// Static instance of the JPEGDEC structure. It requires about
// 17.5K of RAM. You can allocate it dynamically too. Internally it
// does not allocate or free any memory; all memory management decisions
// are left to you
JPEGDEC jpeg;

Arduino_ESP32RGBPanel *rgbpanel = new Arduino_ESP32RGBPanel(
    41 /* DE */, 40 /* VSYNC */, 39 /* HSYNC */, 42 /* PCLK */, 14 /* R0 */, 21 /* R1 */, 47 /* R2 */, 48 /* R3 */,
    45 /* R4 */, 9 /* G0 */, 46 /* G1 */, 3 /* G2 */, 8 /* G3 */, 16 /* G4 */, 1 /* G5 */, 15 /* B0 */, 7 /* B1 */,
    6 /* B2 */, 5 /* B3 */, 4 /* B4 */, 0 /* hsync_polarity */, 180 /* hsync_front_porch */, 30 /* hsync_pulse_width */,
    16 /* hsync_back_porch */, 0 /* vsync_polarity */, 12 /* vsync_front_porch */, 13 /* vsync_pulse_width */,
    10 /* vsync_back_porch */);

Arduino_RGB_Display *gfx = new Arduino_RGB_Display(SCREEN_W, SCREEN_H, rgbpanel, 0, true);

#define SD_SCK 12
#define SD_MISO 13
#define SD_MOSI 11
#define SD_CS 10

// pixel drawing callback
static int jpegDrawCallback(JPEGDRAW *pDraw) {
  // Serial.printf("Draw pos = %d,%d. size = %d x %d\n", pDraw->x, pDraw->y, pDraw->iWidth, pDraw->iHeight);
  gfx->draw16bitBeRGBBitmap(pDraw->x, pDraw->y, pDraw->pPixels, pDraw->iWidth, pDraw->iHeight);
  return 1;
}

void setup() {
  Serial.begin(115200);
  // Serial.setDebugOutput(true);
  // while(!Serial);
  Serial.println("JPEG Image Viewer");

#ifdef GFX_PWD
  pinMode(GFX_PWD, OUTPUT);
  digitalWrite(GFX_PWD, HIGH);
#endif

  // Init Display
  gfx->begin();
  gfx->fillScreen(BLACK);

#ifdef GFX_BL
  pinMode(GFX_BL, OUTPUT);
  digitalWrite(GFX_BL, HIGH);
#endif

  SPI.begin(SD_SCK, SD_MISO, SD_MOSI);
  if (!SD.begin(SD_CS)) {
    Serial.println(F("ERROR: File System Mount Failed!"));
    gfx->println(F("ERROR: File System Mount Failed!"));
  } else {
    unsigned long start = millis();
    jpegDraw(JPEG_FILENAME, jpegDrawCallback, true /* useBigEndian */, 0 /* x */, 0 /* y */,
             gfx->width() /* widthLimit */, gfx->height() /* heightLimit */);
    Serial.printf("Time used: %lu\n", millis() - start);
  }

  delay(5000);
}

void loop() {
  int w = gfx->width();
  int h = gfx->height();

  unsigned long start = millis();
  jpegDraw(JPEG_FILENAME, jpegDrawCallback, true /* useBigEndian */, random(w * 2) - w /* x */,
           random(h * 2) - h /* y */, w /* widthLimit */, h /* heightLimit */);
  Serial.printf("Time used: %lu\n", millis() - start);

  delay(1000);
}